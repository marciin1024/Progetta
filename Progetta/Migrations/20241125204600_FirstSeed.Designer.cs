// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Progetta.Entities;

#nullable disable

namespace Progetta.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20241125204600_FirstSeed")]
    partial class FirstSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Progetta.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 25, 20, 45, 59, 800, DateTimeKind.Utc).AddTicks(8960),
                            Message = "Lubię to!",
                            TaskId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 25, 20, 45, 59, 800, DateTimeKind.Utc).AddTicks(8962),
                            Message = "Super!",
                            TaskId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 25, 20, 45, 59, 800, DateTimeKind.Utc).AddTicks(9006),
                            Message = "Wow!",
                            TaskId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Progetta.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 25, 20, 45, 59, 800, DateTimeKind.Utc).AddTicks(8869),
                            Description = "To jest opis projektu",
                            Name = "Pierwszy projekt",
                            OwnerId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 25, 20, 45, 59, 800, DateTimeKind.Utc).AddTicks(8873),
                            Description = "To jest opis projektu",
                            Name = "Drugi projekt",
                            OwnerId = 2
                        });
                });

            modelBuilder.Entity("Progetta.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Web"
                        });
                });

            modelBuilder.Entity("Progetta.Entities.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedToId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 25, 20, 45, 59, 800, DateTimeKind.Utc).AddTicks(8890),
                            Name = "Pierwsze zadanie",
                            Priority = 1,
                            ProjectId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            AssignedToId = 2,
                            CreatedAt = new DateTime(2024, 11, 25, 20, 45, 59, 800, DateTimeKind.Utc).AddTicks(8892),
                            DueDate = new DateTime(2024, 11, 25, 21, 45, 59, 800, DateTimeKind.Local).AddTicks(8896),
                            Name = "Drugie zadanie",
                            Priority = 2,
                            ProjectId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 25, 20, 45, 59, 800, DateTimeKind.Utc).AddTicks(8939),
                            DueDate = new DateTime(2024, 11, 25, 21, 45, 59, 800, DateTimeKind.Local).AddTicks(8940),
                            Name = "Trzecie zadanie",
                            Priority = 0,
                            ProjectId = 2,
                            Status = 2
                        },
                        new
                        {
                            Id = 4,
                            AssignedToId = 1,
                            CreatedAt = new DateTime(2024, 11, 25, 20, 45, 59, 800, DateTimeKind.Utc).AddTicks(8942),
                            Description = "To jest opis zadania",
                            Name = "Czwarte zadanie",
                            Priority = 2,
                            ProjectId = 1,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Progetta.Entities.TaskTag", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("TaskId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TaskTags");

                    b.HasData(
                        new
                        {
                            TaskId = 1,
                            TagId = 1
                        });
                });

            modelBuilder.Entity("Progetta.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "marcin@gmail.com",
                            FirstName = "Marcin",
                            LastName = "Nowak",
                            Password = "1234",
                            Role = 0
                        },
                        new
                        {
                            Id = 2,
                            Email = "sebastian@gmail.com",
                            FirstName = "Sebastian",
                            LastName = "Kowalski",
                            Password = "1234",
                            Role = 1
                        },
                        new
                        {
                            Id = 3,
                            Email = "leszek@gmail.com",
                            FirstName = "Leszek",
                            LastName = "Malinowski",
                            Password = "1234",
                            Role = 1
                        });
                });

            modelBuilder.Entity("Progetta.Entities.UserProject", b =>
                {
                    b.Property<int>("UsernameId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UsernameId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProjects");

                    b.HasData(
                        new
                        {
                            UsernameId = 1,
                            ProjectId = 2,
                            CreatedAt = new DateTime(2024, 11, 25, 20, 45, 59, 800, DateTimeKind.Utc).AddTicks(9067),
                            Role = 1
                        });
                });

            modelBuilder.Entity("Progetta.Entities.Comment", b =>
                {
                    b.HasOne("Progetta.Entities.Task", "Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Progetta.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Progetta.Entities.Project", b =>
                {
                    b.HasOne("Progetta.Entities.User", "Owner")
                        .WithMany("OwnedProjects")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Progetta.Entities.Task", b =>
                {
                    b.HasOne("Progetta.Entities.User", "AssignedTo")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssignedToId");

                    b.HasOne("Progetta.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedTo");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Progetta.Entities.TaskTag", b =>
                {
                    b.HasOne("Progetta.Entities.Tag", "Tag")
                        .WithMany("TaskTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Progetta.Entities.Task", "Task")
                        .WithMany("TaskTags")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Progetta.Entities.UserProject", b =>
                {
                    b.HasOne("Progetta.Entities.Project", "Project")
                        .WithMany("UserProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Progetta.Entities.User", null)
                        .WithMany("CollaboratedProjects")
                        .HasForeignKey("UserId");

                    b.HasOne("Progetta.Entities.User", "Username")
                        .WithMany()
                        .HasForeignKey("UsernameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Username");
                });

            modelBuilder.Entity("Progetta.Entities.Project", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("UserProjects");
                });

            modelBuilder.Entity("Progetta.Entities.Tag", b =>
                {
                    b.Navigation("TaskTags");
                });

            modelBuilder.Entity("Progetta.Entities.Task", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("TaskTags");
                });

            modelBuilder.Entity("Progetta.Entities.User", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("CollaboratedProjects");

                    b.Navigation("Comments");

                    b.Navigation("OwnedProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
